import { ApiProperty } from "@nestjs/swagger";
import { v4 as uuid } from 'uuid';
import { Cliente } from "src/clientes/entities/cliente.entity";
import { Comprobante } from "src/comprobante/entities/comprobante.entity";
import { DetallePedido } from "src/detalle-pedido/entities/detalle-pedido.entity";
import { Mesa } from "src/mesa/entities/mesa.entity";
import { BeforeInsert, BeforeUpdate, Column, Entity, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn } from "typeorm";

@Entity({ name: 'cabecera_pedido' })
export class CabeceraPedido {

    @ApiProperty({
        example: "96856f1e-94f5-463b-acfa-e7f17db5770e",
        description: ' id "(autogenerated)"',
        default: uuid(),
        type:String

    })
    @PrimaryGeneratedColumn('uuid')
    id: string;


    @ApiProperty({
        example: { id: uuid() },
        description: '"cliente"',
        type: () => Cliente,
        nullable: false
    })
    @ManyToOne(
        () => Cliente,
        (cliente) => cliente.cabeceraPedido,
        { eager: true, nullable: false }
    )
    cliente: Cliente;

    @ApiProperty({
        example: 'efectivo',
        description: '"forma_pago"',
        nullable: false,
        type: String,
    })
    @Column('text', {
        nullable: false,
        default: 'efectivo'
    })
    forma_pago: string;

    @Column('text', {
        nullable: false
    })
    @ApiProperty({
        example: 'juan',
        description: '"cliente_pedido"',
        nullable: false,
        type: String,
    })
    cliente_pedido: string;


    @ManyToOne(
        () => Mesa,
        (mesa) => mesa.cabecera_pedido,
        { eager: true, nullable: true, }
    )
    @ApiProperty({
        example: {
            "id": "96856f1e-94f5-463b-acfa-e7f17db5770e"
        },
        description: '"mesa"',
        nullable: true,
        type: Mesa,
    })
    mesa?: Mesa;

    @OneToMany(
        () => Comprobante,
        (comprobante) => comprobante.cabeceraPedido
    )
    comprobante: Comprobante;


    @Column({
        type: 'timestamp', default: () => "CURRENT_TIMESTAMP"
    })
    @ApiProperty({
        example: new Date(),
        description: '"mesa"',
        default: new Date(),
        type: Date,
    })
    fecha: Date

    @Column({
        type: 'decimal', precision: 9, scale: 2,
        nullable: false
    })
    @ApiProperty({
        example: 20 * 12.2,
        description: '"total"',
        nullable: false,
        type: Number,
    })
    total: number;


    @Column('bool', {
        default: true
    })
    @ApiProperty({
        example: true,
        description: '"estado"',
        default: true,
        type: Boolean,
    })
    estado: boolean;


    @Column('text', {
        nullable: false,
        default: 'llevar'
    })
    @ApiProperty({
        example: 'llevar',
        description: '"forma_pago"',
        nullable: false,
        type: String,
    })
    tipo_pedido: string;

    @OneToMany(
        () => DetallePedido,
        (detalle_pedido) => detalle_pedido.cabeceraPedido
    )
    detalle_pedido: DetallePedido;

    @BeforeInsert()
    checkSlugInsert() {
        if (!this.cliente_pedido) this.cliente_pedido = `${this.cliente.nombre} ${this.cliente.apellidos}`
        this.cliente_pedido = this.cliente_pedido.toLowerCase();

    }

    @BeforeUpdate()
    checkSlugUpdate() {
        if (this.cliente_pedido) this.cliente_pedido = this.cliente_pedido.toLowerCase()

    }
}
